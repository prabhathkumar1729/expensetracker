@*@page "/loginbox"
@using System.Text.Json;
@using System.Text;
@inject ISnackbar SnackbarService
@inject HttpClient _http
@inject NavigationManager Navigation
@using System.Security.Claims;
@inject AuthenticationStateProvider authenticationStateProvider
@using BlazorWalletTrackerFE.Shared;
@using BlazorWalletTrackerFE.Store.UserStore;
@inject IState<UserState> UserStorage;
@inject IDispatcher Dispatcher;
@using BlazorWalletTrackerFE.Shared.Models;
@using System.IdentityModel.Tokens.Jwt;

<div class="ma-6 d-flex justify-center">
    <h3>Login Form</h3>
</div>
<div class="ma-6 d-flex  justify-center">
    <MudCard Width="500px">
        <MudForm Model="_loginModel" @ref="form" Validation="loginValidation.ValidateValue">
            <MudCardContent>
                <MudTextField @bind-Value="_loginModel.Email"
                              For="@(() => _loginModel.Email)"
                              Immediate="true"
                              Label="Email" />
                <MudTextField @bind-Value="_loginModel.Password"
                              For="@(() => _loginModel.Password)"
                              Immediate="true"
                              Label="Password" InputType="InputType.Password" />
                <MudCardActions>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync">Login</MudButton>
                </MudCardActions>
                <div> Dont have an account? <a href="/registration">Register</a></div>
            </MudCardContent>
        </MudForm>
    </MudCard>
</div>


@code
{
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
    }
    public class LoginModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    LoginModel _loginModel = new LoginModel();
    public class LoginValidationVm : AbstractValidator<LoginModel>
    {
        public LoginValidationVm()
        {
            RuleFor(_ => _.Email).NotEmpty()
               .EmailAddress()
               .WithMessage("Invalid email");

            RuleFor(_ => _.Password).NotEmpty().WithMessage("Your password cannot be empty")
                    .MaximumLength(16).WithMessage("Invalid Password")
                    .Matches(@"[A-Z]+").WithMessage("Invalid Password")
                    .Matches(@"[a-z]+").WithMessage("Invalid Password")
                    .Matches(@"[0-9]+").WithMessage("Invalid Password")
                    .Matches(@"[\@\!\?\*\.]+").WithMessage("Invalid Password");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<LoginModel>.CreateWithOptions((LoginModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    LoginValidationVm loginValidation = new LoginValidationVm();

    MudForm? form;

    public class JWTTokenResponse
    {
        public string? AccessToken { get; set; }
    }

    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            string APIErrorMessage = string.Empty;
            var jsonPayload = JsonSerializer.Serialize(_loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");


            var response = await _http.PostAsync("/api/User/login", requestContent);

            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errors = await response.Content
                .ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessage = $"{errorMessage} | ";
                        }
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                SnackbarService.Add("Credentials matched successfully", MudBlazor.Severity.Success);
                JWTTokenResponse? tokenResponse = await response.Content.ReadFromJsonAsync<JWTTokenResponse>();
                await JS.InvokeAsync<string>("localStorage.setItem", "JWTToken", tokenResponse.AccessToken);
                //await authenticationStateProvider.GetAuthenticationStateAsync();
                //((CustomAuthProvider)authenticationStateProvider).NotifyAuthenticationStateChangedWrapper(Task.FromResult(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()))));
                //var tokenHandler = new JwtSecurityTokenHandler();
                //var token = tokenHandler.ReadJwtToken(tokenResponse.AccessToken);
                //var claims = token.Claims;
                //User tokenUser = new User
                //    {
                //        Id = int.Parse(claims.FirstOrDefault(x => x.Type == "Id").Value),
                //        Email = claims.FirstOrDefault(x => x.Type == "Email").Value,
                //        Name = claims.FirstOrDefault(x => x.Type == "Name").Value
                //    };
                //Dispatcher.Dispatch(new SaveToUserStateAction { User = tokenUser });

                (authenticationStateProvider as CustomAuthProvider).NotifyAuthState();
                Navigation.NavigateTo("/userdashboard");
            }
            else
            {
                APIErrorMessage = "Unable to do login, please try later";
            }
            SnackbarService.Add(APIErrorMessage, MudBlazor.Severity.Error);
        }
    }
}*@